
1.Что такое JVM?
Ответ. Виртуальная машина Java — основная часть исполняющей системы Java, так называемой Java Runtime Environment (JRE). Виртуальная машина Java исполняет байт-код Java, предварительно созданный из исходного текста Java-программы компилятором Java. JVM является ключевым компонентом платформы Java. JVM может также использоваться для выполнения программ, написанных на других языках программирования.
Источник. https://ru.wikipedia.org/wiki/Java_Virtual_Machine
2. Что такое JDK?
Ответ. JDK — это реализация спецификации платформы Java, включающая в себя компилятор и библиотеки классов. Простыми словами - это программный пакет, который загружается для создания Java-приложений. Компилятор — это программа, способная принимать исходные файлы с расширением .java, которые являются обычным текстом, и превращать их в исполняемые файлы с расширением .class.
Источник.  https://topjava.ru/blog/what-is-the-jdk
3. Что такое JRE?
Ответ. JRE - это среда выполнения, которая является контейнером для JVM и JDK. Для запуска и исполнения программы необходима специальная среда выполнения. Она загружает файлы классов, обеспечивает доступ к памяти и другим системным ресурсам – эти функции, как раз, и выполняет JRE.
Источник. https://topjava.ru/blog/what-is-the-jre
4. Даны корректные исходные файлы: Hello.java и hello.cpp. Каждый из них преобразуется в исполняемый код, который запускается на выполнение. Назовем данный процесс жизненным циклом приложения. В чем отличие жизненных циклов этих приложений?
Ответ. Неуправляемый C++ компилируется непосредственно в машинный код. Программист вызывает компилятор, который нацелен на определенную платформу, и компилятор выводит исполняемый файл, который работает только на этой платформе. Управляемый код Java компилируется в промежуточный код. При выполнении включается так называемый компилятор Just-in-Time, который непосредственно перед выполнением переводит промежуточный код в машинный. Затем процессор выполнит машинный код, сгенерированный компилятором.
Источник. 
https://coderoad.ru/3663754/%D0%A7%D0%B5%D0%BC-%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B0%D0%B5%D1%82%D1%81%D1%8F-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-c-c-java
5. Перечислите группы примитивных типов данных и состав каждой группы.
Ответ.  В Java есть 8 примитивных типов, которые делят на 4 группы:
    1) Целые числа - byte, short, int, long
    2) Числа с плавающей точкой (иначе вещественные) - float, double
    3) Логический - boolean
    4) Символьный – char
Источник. https://ru.wikibooks.org/wiki/Java/%D0%A2%D0%B8%D0%BF%D1%8B_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85
6. Какой размер данного булевского типа?
Ответ.  Тип boolean использует 4 байт памяти
Источник. http://developer.alexanderklimov.ru/android/java/types.php
7. Какой размер данного символьного типа?
Ответ. В Java для char используется кодировка Unicode и для хранения Unicode-символов используется 16 бит или 2 байта памяти.
Источник. http://developer.alexanderklimov.ru/android/java/types.php
8. Какими литералами можно инициализировать символьную переменную?
Ответ.  Символьные литералы в Java представлены кодовой таблицей Unicode, то есть каждый символ — 16-битовое значение. Для обозначения символа в коде его обособляют одинарными кавычками. Обычные символы можно указать в явном виде: ‘,’ или ‘@’. Если символ служебный (например, перенос строки или табуляция), такой символ необходимо экранировать обратным слешем: '/n'. Символы, которые нельзя просто так ввести с консоли, можно задать в их 16-битовом виде. Для этого необходимо указать код символа с префиксом \u, например ‘\u00F7'. Также символы можно указывать в восьмеричном стиле (трехзначный номер), добавив в начале просто обратный слеш, например ‘\122’.
Источник. https://javarush.ru/groups/posts/literaly-v-java#%D0%A1%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D0%BB%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D0%BB%D1%8B
9. Какие есть виды переменных?
Ответ. В java есть 4 группы переменных: 
    1. Целочисленные (к ним относятся byte, short, int, long);
    2. С плавающей точкой (к ним относятся float, double);
    3. Символы (char);
    4. Логические (boolean).
Источник. https://vertex-academy.com/tutorials/ru/sozdanie-peremennyx-i-tipy-peremenny/
10-11. В какой области памяти хранятся локальные переменные, аргументы метода?
Ответ.  В стеке хранятся данные, относящиеся к контексту функций, которые на этот момент времени выполняются. К таким данным относятся локальные переменные функции (то, что объявлено в её теле), аргументы функции или метода, адрес возврата и возможно возвращаемое значение.
Источник. https://www.tune-it.ru/web/bleizard/blog/-/blogs/2321688
12-13. В какой области памяти хранятся объекты, ссылки на объекты?
Ответ. Объекты создаются в куче в момент работы программы, тогда, когда это понадобится. И созданный объект в памяти будет лежать по какому-то адресу памяти. Адрес того места, где лежит наш объект, будет лежать в стеке, но сам объект находится в куче.
Источник. https://www.tune-it.ru/web/bleizard/blog/-/blogs/2321688
14. В какой области памяти хранятся массивы?
Ответ.  В языке программирования Java массивы являются объектами, создаются динамически и могут быть присвоены переменным типа Object, следовательно, массивы хранятся в куче.
Источник. https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html
15. Дайте определение массива.
Ответ. Массив — это структура данных, в которой хранятся элементы одного типа. Его можно представить, как набор пронумерованных ячеек, в каждую из которых можно поместить какие-то данные (один элемент данных в одну ячейку). Доступ к конкретной ячейке осуществляется через её номер. Номер элемента в массиве также называют индексом. В случае с Java массив однороден, то есть во всех его ячейках будут храниться элементы одного типа.
Источник. https://javarush.ru/groups/posts/massivy-java
16. Назовите 3 этапа создания массива. Какие действия выполняет JVM на каждом этапе?
Ответ. Процесс создания массива можно разделить на три этапа:
    1. Объявление (declaration)
На этом этапе определяется только переменная типа ссылка (reference) на массив, содержащая тип массива.
    2. Создание (instantation)
На этом этапе указывается количество элементов массива, называемое его размером, выделяется место для массива в оперативной памяти, переменной-ссылке присваивается оператором = адрес массива.
    3. Инициализация (initialization)
На этом этапе элементы массива получают начальные значения. 
Источник. http://pr0java.blogspot.com/2015/05/1.html
17. Приведите различные способы инициализации массива.
Ответ.  Инициализировать элементы массива значениями можно несколькими способами:
    1. Присвоить каждому элементу массива конкретное значение (это можно сделать, например, в цикле, но до этого массив уже должен быть объявлен и создан).

    2. Инициализировать массив при помощи перечисления значений его элементов в фигурных скобках (это можно сделать как на этапе объявления, так и на этапе создания, но синтаксис при этом разный).
Источник. http://pr0java.blogspot.com/2015/05/1.html

18. Дан массив
int[] values = {...};
//в фигурных скобках корректный список инициализации.
Есть ли различие в проходе по массиву циклами:
1. for (int i=0; i < values.length; i++) {...}
2. for (int value : values) {...}
Если да, то в чем различие заключается?
Как называется каждый цикл?
Ответ. Первый цикл называется циклом со счетчиком. Количество итераций определяется смоделированным счетчиком. В условии цикла задается его начальное и конечное значение. Каждую итерацию счетчик наращивается. Мы можем заранее определить количество итераций. Второй цикл является циклом for each. Этот цикл Java — разновидность цикла for для итерации коллекций и массивов, где values - переменная, существующий список или массив, int value - определение новой переменной того же типа, что и values. Различие между циклами заключается в том, что цикл for each не требует ручного изменения переменной - шага для перебора. Цикл автоматически выполняет эту работу.
Источник. https://javarush.ru/groups/posts/cikly-java
19. Можно ли создать массив нулевой длины? Если да, то для каких целей он необходим?
Ответ. Можно создать массив нулевого размера. Такой массив может оказаться полезным при написании метода, вычисляющего некий массив, который оказывается пустым.
Источник. https://www.cyberforum.ru/java-j2se/thread2163498.html
20. Что собой представляет двумерный массив? Многомерный массив?
Ответ. Двумерный массив в Java — это массив массивов, то есть в каждой его ячейке находится ссылка на некий массив. Но гораздо проще его представить в виде таблицы, у которой задано количество строк (первое измерение) и количество столбцов (второе измерение). Многомерный массив – это массив, элементами которого являются другие массивы. Двумерный массив также является многомерным массивом. 
Источник. https://javarush.ru/groups/posts/mnogomernye-massivy
21. Перечислите ссылочные типы.
Ответ. Существует четыре типа ссылочных данных в Java:
    1. Классы (class types)
    2. Интерфейсы (interface types)
    3. Переменные типов (type variables)
    4. Массивы (array types)
Ссылочные типы хранят ссылку на объект, или же тип данных null, то есть нулевую (пустую) ссылку.
Источник. http://pr0java.blogspot.com/2015/04/java-1.html
22. Какая структура у java-файла (внутренности класса не указывать)?
Какие из элементов структуры являются обязательными?
Ответ. Файловая структура исходного кода Java обычно имеет следующую структуру:
    1. package statement (заявления о пакете)
    2. Операторы импорта (import statements) 
    3. class definition (объявление класса)
Объявление класса является обязательным элементом структуры.
Источник. https://www.d.umn.edu/~gshute/java/file-structures.xhtml



23. Для чего предназначены пакеты?
Ответ. Организация классов в виде пакетов позволяет избежать конфликта имен между классами. Ведь нередки ситуации, когда разработчики называют свои классы одинаковыми именами. Принадлежность к пакету позволяет гарантировать однозначность имен.
Источник. https://metanit.com/java/tutorial/3.2.php
24. Как выглядит полное имя класса?
Ответ. Полным именем класса считается имя, состоящее из всех пакетов, перечисленных через точку и имени класса. Пример: имя класса – String, полное имя класса - java.lang.String.
Источник. https://javarush.ru/quests/lectures/questsyntax.level02.lecture09
25. Для чего предназначен оператор import?
Ответ. Оператор import служит только для удобства программирования и не является обязательным с формальной точки зрения для создания завершенной программы нa java. Но если в прикладном коде приходится ссылаться на несколько десятков классов, то оператор import значительно сокращает объем вводимого исходного кода.
Источник. https://metanit.com/java/tutorial/3.2.php
26. Для чего предназначен статический импорт?
Ответ. Функция static import позволяет получить доступ к статическим членам класса без квалификации класса. import обеспечивает доступ к классам и интерфейсу, тогда как static import обеспечивает доступность к статическим членам класса.
Источник. https://www.examclouds.com/ru/java/java-core-russian/java-static-import
27. Сколько внешних публичных классов можно объявить в одном java-файле?
Ответ. Один публичный класс верхнего уровня для каждого файла.
Источник. https://qastack.ru/programming/968347/can-a-java-file-have-more-than-one-class
28. Может ли синтаксически правильный java-файл иметь имя 1.java? Если да, то какие ограничения?
Ответ. Нет, не может, так как это недопустимое имя для java-файла, в соответствии с Code Convetions.
Источник. https://www.magnumblog.space/java/131-translating-java-code-conventions
29. Допустим, в одном java-файле объявлены два синтаксически правильных внешних класса. Какие могут быть результаты компиляции данного файла?
Ответ. 
30. Как записывается заголовок метода main() раннер-класса (т.е. класса, который может стартовать из-под JVM)? Это единственный способ?
Ответ. Инструмент java запускает приложение Java. Он делает это, начиная среда выполнения Java, загрузка указанного класса и вызов основного метода этого класса. Метод должен быть объявлен открытым и статическим, он не должен возвращать никакого значения и должен принимать массив String в качестве параметра. Объявление метода должно выглядеть следующим образом: public static void main(String[] args).
Источник. https://coderoad.ru/261428/%D0%A2%D0%BE%D1%87%D0%BA%D0%B0-%D0%B2%D1%85%D0%BE%D0%B4%D0%B0-%D0%B4%D0%BB%D1%8F-Java-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9-main-init-%D0%B8%D0%BB%D0%B8-run
31. Может ли один java-файл содержать два и более раннер-класса?
Ответ. Да, в программе может быть несколько классов, содержащих метод main(), но по крайней мере один класс, который содержит main(), должен быть общедоступным, чтобы JMV запустил этот класс в качестве основного потока.
32. Можно ли определить метод main() с другими модификаторами?
Ответ. Метод main() должен быть публичным (public). В противном случае, он не может быть вызван с помощью java-интерпретатора, чтобы запустить класс. Ключевое слово static используется для создания методов, которые будут существовать независимо от каких-либо экземпляров, созданных для класса. Следовательно, метод main() не может быть определен с другими модификаторами.
Источник. http://proglang.su/java/modifiers
33. Может ли в классе быть два и более метода main()?
Если да, то приведите пример. 
Ответ. Один класс не может содержать более одного метода main (просто потому, что в классе не может быть нескольких методов с одинаковой сигнатурой), но каждый из них может содержать метод main.
34. Может ли в классе быть два метода main(), один из которых раннер, а второй метод main() отличается от первого только отсутствием модификатора static?
Если да, то приведите пример вызова второго метода. 
Ответ. Нет, не может. Так как в одном классе может быть только один основной метод.
Источник. https://overcoder.net/q/531350/%D0%BD%D0%B5%D1%81%D0%BA%D0%BE%D0%BB%D1%8C%D0%BA%D0%BE-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%BE%D0%B2-main-%D0%B2-java
35. В корне проекта имеется файл HelloWorld.java, пути к необходимым ресурсам открыты.
Создайте bat-файл для запуска приложения на выполнение.
Ответ.    Javac HelloWorld.java
    java -cp . HelloWorld

36. В корне проекта имеется
1. папка src для исходных java-файлов, а в ней – файл HelloArgs.java, который выводит приветствие для каждого аргумента командной строки;
2. папка bin для class-файлов.
Пути к компилятору и JVM открыты, переменная CLASSPATH не установлена.
Создайте bat-файл для запуска приложения с двумя аргументами командной строки clever и 25007 на выполнение.
Ответ.
37. Имеется корректный файл helloWorld.jar.
Создайте bat-файл для запуска приложения на выполнение.
Ответ. 
    1. Откройте notepad.exe
    2. Напишите: java -helloWorld.jar
    3. Сохраните его с расширением .bat
    4. Скопируйте его в каталог с файлом .jar
    5. Дважды щелкните его, чтобы запустить файл .jar
Источник. https://overcoder.net/q/27496/%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D0%BA-%D1%84%D0%B0%D0%B9%D0%BB%D0%B0-jar-%D0%B2-windows
38. Какие есть виды комментариев?
Ответ. Комментарии кода бывают: 
    1. Строчные (т.е. описываются в одну строку): //Строчный комментарий
    2. Блочные (т.е. описываются целым блоком, т.к. не помещаются в одну строку): /* Блочный комментарий *\
    3. Комментарии для документирования : /** Prints a String and  then terminate the line. This methods … */
Источник. https://javarush.ru/groups/posts/607-kommentarii-v-java--ne-vsje-tak-prosto













